#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nucampsiteserver:server');
var http = require('http');

// Allows creation of secure server connections to handle SSL certificates
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
// Port 3000 is for development while 3443 is for production.
// app.set stores a variable for us to retrieve later with app.get
app.set('secPort', port+443);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create HTTPS server.
 */

const options = {
  // __dirname points to the current directory. In this case it is the bin directory.
  key: fs.readFileSync(__dirname+'/server.key'),
  cert: fs.readFileSync(__dirname+'/server.cert')
};

// Using the options and app to create a secure server.
// Its secure because we are passing in the key and cert.
const secureServer = https.createServer(options, app)

/**
 * Listen on provided port, on all network interfaces using secureServer
 */

secureServer.listen(app.get('secPort'), () => {
  console.log('Server listening on port', app.get('secPort'));
  // app.get('secPort') refers to the variable we stored when creating app.set for secPort.
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
